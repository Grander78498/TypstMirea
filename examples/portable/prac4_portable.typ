#import ("/src/titul.typ"): *
#import ("/src/preamble.typ"): *
#show: main
#titul(
  Институт: [Информационных Технологий],
  Кафедра: [Вычислительной Техники],
  Практика: [Практическая работа №4\
            "Муравьиный алгоритм"],
  Дисциплина: ["Системный анализ данных СППР"],
  Группа: [ИКБО-04-22],
  Студент: [Егоров Л.А.],
  Преподаватель: [Железняк Л.М.]
)
#show: template

#outline()


//
// ВВЕДЕНИЕ
// 

#let intro = [
Муравьиный алгоритм --- это эвристический метод оптимизации, разработанный итальянским ученым Марко Дориго в 1992 году. Работа алгоритма вдохновлена тем, как колония муравьев отправляется на поиски пищи. Каждый муравей оставляет на своем пути феромоны --- химические вещества, привлекающие других муравьев. Чем больше муравьев проходит по определенному пути, тем сильнее концентрация феромонов на нем. В результате, большинство муравьев выбирает путь с наибольшей концентрацией феромонов, который, как правило, является кратчайшим.

Муравьиный алгоритм моделирует это поведение. Вместо реальных муравьев и феромонов, алгоритм использует "искусственных муравьев" и "искусственные феромоны".

Искусственные муравьи перемещаются по графу, представляющему пространство поиска, и оставляют феромоны на ребрах, которые они посещают. Вероятность выбора муравьем определенного ребра зависит от концентрации феромонов на нем и других факторов, таких как расстояние. Со временем, феромоны испаряются, что позволяет алгоритму "забывать" неудачные пути и сосредотачиваться на наиболее перспективных.

Муравьиный алгоритм широко используется для решения различных задач оптимизации, таких как:

-	задача коммивояжера: поиск кратчайшего маршрута, проходящего через все заданные города
-	распределение ресурсов: оптимальное распределение ресурсов (например, рабочей силы, оборудования) для выполнения задач
-	планирование: составление расписаний, оптимизация маршрутов транспорта
-	сетевое проектирование: поиск оптимальных путей в сетях (например, компьютерных, транспортных)
]

//
// ОСНОВНАЯ ЧАСТЬ
// 

#let main = [
== Описание алгоритма
Сначала происходит инициализация начальных параметров и самой муравьиной колонии --- для алгоритма муравьи создаются в количестве, равном количеству вершин в графе, и каждый из них начинает свой путь со своей вершины.

Важно отметить, что на каждую дугу графа «наносят» феромон --- число, сгенерированное псевдослучайным образом в интервале от 0 до 1. Оно является одинаковым для всех дуг перед начальной итерацией.

Далее происходит построение пути для каждого муравья в колонии. Выбор муравьём новой вершины определяется с помощью вероятности, определяемой по Формуле @ant-prob.

$ p_(i j)^k = cases(
  (tau_(i j)^alpha (t) eta_(i j)^beta (t)) / (sum_(u in N_i^k) t_(i u)^alpha (t) eta_(i u)^beta (t)) &", если " j in N_i^k,
  0 &", если " j cancel(in) N_i^k
)"  ," $ <ant-prob>

#print_symbols([$i$ --- номер текущей вершины муравья],
	            [$j$ --- номер вершины, куда муравей может перейти],
              [$tau_(i j)$ --- количество феромона на дуге],
	            [$eta_(i j)$ --- априорная эффективность перехода по дуге из i в j],
              [$N_i^k$ --- множество доступных вершин для перемещения],
	            [$alpha, beta$ --- свободные параметры алгоритма (вес фермента и коэффициент эвристики])
После построения пути для каждого муравья высчитывается длина его пути.

Далее на каждой дуге происходит испарение феромона (@pher-vapor).

$ tau_(i j) (t)=(1-rho) tau_(i j) (t) " ," $<pher-vapor>

#print_symbols(
  [$rho$ --- коэффициент испарения, $rho in [0,1]$]
)

Для каждой дуги происходит изменение феромона в зависимости от того, насколько оптимальный путь получился у муравьёв (@pher-update).

$ tau_(i j) (t + 1) = t_(i j) (t) + sum_(k=1)^(n_k) Delta tau_(i j) (t) $<pher-update>

#print_symbols(
  [#v(12pt) #eq-simple($ Delta tau_(i j)^k (t) = cases(
    Q / L^k (t) &", если дуга " (i, j) " есть в пути " x^k (t),
    0 &", иначе"
  )$) --- изменение количества феромона в зависимости от длины пройденного пути],
  [$Q$ --- положительная константа]
)
Точкой останова алгоритма является выполнение заданного числа итераций.
== Постановка задачи
Цель работы: реализовать задачу коммивояжера муравьиным алгоритмом для нахождения приближённого оптимального маршрута.

Поставлены следующие задачи:
- изучить муравьиный алгоритм
- выбрать предметную область для задачи коммивояжера
- произвести ручной расчёт одной итерации алгоритма для двух муравьёв
- разработать программную реализацию муравьиного алгоритма для задачи коммивояжера
Условие задачи коммивояжёра: дан полный граф, т.е. из каждой вершины можно пройти в любую другую вершину. В этом графе нужно найти полный путь минимальной длины, т.е. обойти каждую вершину в графе по одному разу.

Выбранная предметная область для задачи коммивояжёра: в торговом центре расположено n магазинов. Человеку нужно пройтись по всем этим магазинам, при этом ему нужно затратить как можно меньше усилий на это, т.е. общий пройденный путь должен быть минимально возможным. Поэтому нужно определить минимальный путь, позволяющий обойти все магазины.

== Ручной расчёт алгоритма
Для ручного расчёта число магазинов в задаче взято равным 6, число муравьёв --- 2. Значения свободных параметров: $alpha = 1, beta = 5, rho = 0.5$.

Для каждого магазина случайным образом сгенерированы координаты в двумерном пространстве (диапазон координат от -10 до 10). Эти данные представлены заданы в Таблице @ant-store.

#let data = csv("/include/backup_6.csv")
#simple-table(columns: 3,
              name: "Характеристики магазинов",
              header: ([Номер магазина], [Координата по x], [Координата по y]), 
              label: <ant-store>, 
              ..data.slice(1, data.len()).flatten())

Для расчёта расстояний между вершинами в графе использовалось Евклидово расстояние для точек в двумерном пространстве (@ant-euclid).

$ d = sqrt((x_2 - x_1)^2 - (y_2 - y_1)^2) $<ant-euclid>

Ниже приведены расчёты длины каждого ребра в графе, т.е. рассчитаны длины путей между каждой парой вершин.

#eq-simple($ sqrt((92 + 67)^2 + (-97 - 28)^2) = 202.25 \
sqrt((92 + 14)^2 + (-97 + 90)^2) = 106.23 \
sqrt((92 + 67)^2 + (-97 - 72)^2) = 232.04 \
sqrt((92 - 19)^2 + (-97 - 75)^2) = 186.85 \
sqrt((92 - 77)^2 + (-97 + 97)^2) = 15.0 \
sqrt((-67 + 14)^2 + (28 + 90)^2) = 129.36 \
sqrt((-67 + 67)^2 + (28 - 72)^2) = 44.0 \
sqrt((-67 - 19)^2 + (28 - 75)^2) = 98.01 \
sqrt((-67 - 77)^2 + (28 + 97)^2) = 190.69 \
sqrt((-14 + 67)^2 + (-90 - 72)^2) = 170.45 \
sqrt((-14 - 19)^2 + (-90 - 75)^2) = 168.27 \
sqrt((-14 - 77)^2 + (-90 + 97)^2) = 91.27 \
sqrt((-67 - 19)^2 + (72 - 75)^2) = 86.05 \
sqrt((-67 - 77)^2 + (72 + 97)^2) = 222.03 \
sqrt((19 - 77)^2 + (75 + 97)^2) = 181.52 $)


Рассчитанные длины рёбер сведены в Таблицу @ant-length с указанием вершин, составляющих ребро.
#simple-table(name: "Длины рёбер в графе",
              header: ([Ребро], [Длина ребра]), 
              label: <ant-length>, 
              [0 #math.arrow 1], [ 202.25],
              [0 #math.arrow 2], [ 106.23],
              [0 #math.arrow 3], [ 232.04],
              [0 #math.arrow 4], [ 186.85],
              [0 #math.arrow 5], [ 15.00],
              [1 #math.arrow 2], [ 129.36],
              [1 #math.arrow 3], [ 44.00],
              [1 #math.arrow 4], [ 98.01],
              [1 #math.arrow 5], [ 190.69],
              [2 #math.arrow 3], [ 170.45],
              [2 #math.arrow 4], [ 168.27],
              [2 #math.arrow 5], [ 91.27],
              [3 #math.arrow 4], [ 86.05],
              [3 #math.arrow 5], [ 222.03],
              [4 #math.arrow 5], [ 181.52]
              )

Также проинициализированы значения феромона на каждой дуге одним случайным значением: 0.876.

Для расчёта априорной эффективности из Формулы @ant-prob использована Формула @aprior-prob, чтобы иметь возможность проводить расчёты с точностью до пяти знаков после запятой.

$ eta_(i j)=100 / d_(i j) $<aprior-prob>

=== Первая итерация
Для упрощения расчётов муравьи начинают свой путь с первой вершины.

Далее приведены расчёты вероятностей перехода первого муравья c 1-й вершины:

#eq-simple($ p^1_12 = (0.876^1 * 0.494^2)/(0.00403) = 0.005 \
p^1_13 = (0.876^1 * 0.941^2)/(0.00403) = 0.019 \
p^1_14 = (0.876^1 * 0.431^2)/(0.00403) = 0.004 \
p^1_15 = (0.876^1 * 0.535^2)/(0.00403) = 0.006 \
p^1_16 = (0.876^1 * 6.667^2)/(0.00403) = 0.965 \
$)
Сгенерировано случайное число r = 0.783, которое определяет, на какую из вершин будет совершён переход. Для этого рассчитанные вероятности складываются в накопительную сумму.

#eq-simple($ P_2 = 0.005 < r = 0.783 \
P_3 = 0.025 < r = 0.783 \
P_4 = 0.029 < r = 0.783 \
P_5 = 0.035 < r = 0.783 \
P_6 = 1.000 >= r = 0.783 \
$)
Происходит переход на вершину 6. Далее приведены расчёты вероятностей перехода первого муравья c 6-й вершины:

#eq-simple($ p^1_62 = (0.876^1 * 0.524^2)/(0.00017) = 0.139 \
p^1_63 = (0.876^1 * 1.096^2)/(0.00017) = 0.606 \
p^1_64 = (0.876^1 * 0.450^2)/(0.00017) = 0.102 \
p^1_65 = (0.876^1 * 0.551^2)/(0.00017) = 0.153 \
$)
Сгенерировано случайное число r = 0.044, которое определяет, на какую из вершин будет совершён переход. Для этого рассчитанные вероятности складываются в накопительную сумму.

#eq-simple($ P_2 = 0.139 >= r = 0.044 \
$)
Происходит переход на вершину 2. Далее приведены расчёты вероятностей перехода первого муравья c 2-й вершины:

#eq-simple($ p^1_23 = (0.876^1 * 0.773^2)/(0.00060) = 0.088 \
p^1_24 = (0.876^1 * 2.273^2)/(0.00060) = 0.759 \
p^1_25 = (0.876^1 * 1.020^2)/(0.00060) = 0.153 \
$)
Сгенерировано случайное число r = 0.674, которое определяет, на какую из вершин будет совершён переход. Для этого рассчитанные вероятности складываются в накопительную сумму.

#eq-simple($ P_3 = 0.088 < r = 0.674 \
P_4 = 0.847 >= r = 0.674 \
$)
Происходит переход на вершину 4. Далее приведены расчёты вероятностей перехода первого муравья c 4-й вершины:

#eq-simple($ p^1_43 = (0.876^1 * 0.587^2)/(0.00015) = 0.203 \
p^1_45 = (0.876^1 * 1.162^2)/(0.00015) = 0.797 \
$)
Сгенерировано случайное число r = 0.994, которое определяет, на какую из вершин будет совершён переход. Для этого рассчитанные вероятности складываются в накопительную сумму.

#eq-simple($ P_3 = 0.203 < r = 0.994 \
P_5 = 1.000 >= r = 0.994 \
$)
Происходит переход на вершину 5. Далее приведены расчёты вероятностей перехода первого муравья c 5-й вершины:

#eq-simple($ p^1_53 = (0.876^1 * 0.594^2)/(0.00003) = 1.000 \
$)
Сгенерировано случайное число r = 0.545, которое определяет, на какую из вершин будет совершён переход. Для этого рассчитанные вероятности складываются в накопительную сумму.

#eq-simple($ P_3 = 1.000 >= r = 0.545 \
$)
Происходит переход на вершину 3. Затем муравей возвращается на начальную вершину, и его путь завершается. Таким образом, путь первого муравья выглядит следующим образом: $0 -> 5 -> 1 -> 3 -> 4 -> 2 -> 0$. Длина пути равна: $15.0 + 190.69 + 44.0 + 86.05 + 168.27 + 106.23 = 610.236$.

Далее приведены расчёты вероятностей перехода второго муравья c 1-й вершины:

#eq-simple($ p^2_12 = (0.876^1 * 0.494^2)/(0.00403) = 0.005 \
p^2_13 = (0.876^1 * 0.941^2)/(0.00403) = 0.019 \
p^2_14 = (0.876^1 * 0.431^2)/(0.00403) = 0.004 \
p^2_15 = (0.876^1 * 0.535^2)/(0.00403) = 0.006 \
p^2_16 = (0.876^1 * 6.667^2)/(0.00403) = 0.965 \
$)
Сгенерировано случайное число r = 0.145, которое определяет, на какую из вершин будет совершён переход. Для этого рассчитанные вероятности складываются в накопительную сумму.

#eq-simple($ P_2 = 0.005 < r = 0.145 \
P_3 = 0.025 < r = 0.145 \
P_4 = 0.029 < r = 0.145 \
P_5 = 0.035 < r = 0.145 \
P_6 = 1.000 >= r = 0.145 \
$)
Происходит переход на вершину 6. Далее приведены расчёты вероятностей перехода второго муравья c 6-й вершины:

#eq-simple($ p^2_62 = (0.876^1 * 0.524^2)/(0.00017) = 0.139 \
p^2_63 = (0.876^1 * 1.096^2)/(0.00017) = 0.606 \
p^2_64 = (0.876^1 * 0.450^2)/(0.00017) = 0.102 \
p^2_65 = (0.876^1 * 0.551^2)/(0.00017) = 0.153 \
$)
Сгенерировано случайное число r = 0.071, которое определяет, на какую из вершин будет совершён переход. Для этого рассчитанные вероятности складываются в накопительную сумму.

#eq-simple($ P_2 = 0.139 >= r = 0.071 \
$)
Происходит переход на вершину 2. Далее приведены расчёты вероятностей перехода второго муравья c 2-й вершины:

#eq-simple($ p^2_23 = (0.876^1 * 0.773^2)/(0.00060) = 0.088 \
p^2_24 = (0.876^1 * 2.273^2)/(0.00060) = 0.759 \
p^2_25 = (0.876^1 * 1.020^2)/(0.00060) = 0.153 \
$)
Сгенерировано случайное число r = 0.919, которое определяет, на какую из вершин будет совершён переход. Для этого рассчитанные вероятности складываются в накопительную сумму.

#eq-simple($ P_3 = 0.088 < r = 0.919 \
P_4 = 0.847 < r = 0.919 \
P_5 = 1.000 >= r = 0.919 \
$)
Происходит переход на вершину 5. Далее приведены расчёты вероятностей перехода второго муравья c 5-й вершины:

#eq-simple($ p^2_53 = (0.876^1 * 0.594^2)/(0.00015) = 0.207 \
p^2_54 = (0.876^1 * 1.162^2)/(0.00015) = 0.793 \
$)
Сгенерировано случайное число r = 0.548, которое определяет, на какую из вершин будет совершён переход. Для этого рассчитанные вероятности складываются в накопительную сумму.

#eq-simple($ P_3 = 0.207 < r = 0.548 \
P_4 = 1.000 >= r = 0.548 \
$)
Происходит переход на вершину 4. Далее приведены расчёты вероятностей перехода второго муравья c 4-й вершины:

#eq-simple($ p^2_43 = (0.876^1 * 0.587^2)/(0.00003) = 1.000 \
$)
Сгенерировано случайное число r = 0.265, которое определяет, на какую из вершин будет совершён переход. Для этого рассчитанные вероятности складываются в накопительную сумму.

#eq-simple($ P_3 = 1.000 >= r = 0.265 \
$)
Происходит переход на вершину 3. Затем муравей возвращается на начальную вершину, и его путь завершается. Таким образом, путь второго муравья выглядит следующим образом: $0 -> 5 -> 1 -> 4 -> 3 -> 2 -> 0$. Длина пути равна: $15.0 + 190.69 + 98.01 + 86.05 + 170.45 + 106.23 = 666.423$.

Затем выполняется испарение феромона по Формуле @pher-vapor:

#eq-simple($ tau_12 = (1 - 0.5) * 0.876 = 0.438\
tau_13 = (1 - 0.5) * 0.876 = 0.438\
tau_14 = (1 - 0.5) * 0.876 = 0.438\
tau_15 = (1 - 0.5) * 0.876 = 0.438\
dots\
tau_65 = (1 - 0.5) * 0.876 = 0.438
$)
Изменение концентрации феромона происходит по Формуле @pher-update, где значение Q принято за 100. Далее отображены только значения феромонов, которые после данной итерации изменились на ненулевую величину. 

#eq-simple($ tau_16 = 0.438 + 0.314 = 0.752 \
tau_24 = 0.438 + 0.164 = 0.602 \
tau_25 = 0.438 + 0.150 = 0.588 \
tau_31 = 0.438 + 0.314 = 0.752 \
tau_43 = 0.438 + 0.150 = 0.588 \
tau_45 = 0.438 + 0.164 = 0.602 \
tau_53 = 0.438 + 0.164 = 0.602 \
tau_54 = 0.438 + 0.150 = 0.588 \
tau_62 = 0.438 + 0.314 = 0.752 \
$)

=== Вторая итерация
Далее приведены расчёты вероятностей перехода первого муравья c 1-й вершины:

#eq-simple($ p^1_12 = (0.438^1 * 0.494^2)/(0.00341) = 0.003 \
p^1_13 = (0.438^1 * 0.941^2)/(0.00341) = 0.011 \
p^1_14 = (0.438^1 * 0.431^2)/(0.00341) = 0.002 \
p^1_15 = (0.438^1 * 0.535^2)/(0.00341) = 0.004 \
p^1_16 = (0.752^1 * 6.667^2)/(0.00341) = 0.979 \
$)
Сгенерировано случайное число r = 0.954, которое определяет, на какую из вершин будет совершён переход. Для этого рассчитанные вероятности складываются в накопительную сумму.

#eq-simple($ P_2 = 0.003 < r = 0.954 \
P_3 = 0.015 < r = 0.954 \
P_4 = 0.017 < r = 0.954 \
P_5 = 0.021 < r = 0.954 \
P_6 = 1.000 >= r = 0.954 \
$)
Происходит переход на вершину 6. Далее приведены расчёты вероятностей перехода первого муравья c 6-й вершины:

#eq-simple($ p^1_62 = (0.752^1 * 0.524^2)/(0.00010) = 0.217 \
p^1_63 = (0.438^1 * 1.096^2)/(0.00010) = 0.551 \
p^1_64 = (0.438^1 * 0.450^2)/(0.00010) = 0.093 \
p^1_65 = (0.438^1 * 0.551^2)/(0.00010) = 0.139 \
$)
Сгенерировано случайное число r = 0.098, которое определяет, на какую из вершин будет совершён переход. Для этого рассчитанные вероятности складываются в накопительную сумму.

#eq-simple($ P_2 = 0.217 >= r = 0.098 \
$)
Происходит переход на вершину 2. Далее приведены расчёты вероятностей перехода первого муравья c 2-й вершины:

#eq-simple($ p^1_23 = (0.438^1 * 0.773^2)/(0.00040) = 0.066 \
p^1_24 = (0.602^1 * 2.273^2)/(0.00040) = 0.781 \
p^1_25 = (0.588^1 * 1.020^2)/(0.00040) = 0.154 \
$)
Сгенерировано случайное число r = 0.065, которое определяет, на какую из вершин будет совершён переход. Для этого рассчитанные вероятности складываются в накопительную сумму.

#eq-simple($ P_3 = 0.066 >= r = 0.065 \
$)
Происходит переход на вершину 3. Далее приведены расчёты вероятностей перехода первого муравья c 3-й вершины:

#eq-simple($ p^1_34 = (0.438^1 * 0.587^2)/(0.00003) = 0.494 \
p^1_35 = (0.438^1 * 0.594^2)/(0.00003) = 0.506 \
$)
Сгенерировано случайное число r = 0.467, которое определяет, на какую из вершин будет совершён переход. Для этого рассчитанные вероятности складываются в накопительную сумму.

#eq-simple($ P_4 = 0.494 >= r = 0.467 \
$)
Происходит переход на вершину 4. Далее приведены расчёты вероятностей перехода первого муравья c 4-й вершины:

#eq-simple($ p^1_45 = (0.602^1 * 1.162^2)/(0.00008) = 1.000 \
$)
Сгенерировано случайное число r = 0.958, которое определяет, на какую из вершин будет совершён переход. Для этого рассчитанные вероятности складываются в накопительную сумму.

#eq-simple($ P_5 = 1.000 >= r = 0.958 \
$)
Происходит переход на вершину 5. Затем муравей возвращается на начальную вершину, и его путь завершается. Таким образом, путь первого муравья выглядит следующим образом: $0 -> 5 -> 1 -> 2 -> 3 -> 4 -> 0$. Длина пути равна: $15.0 + 190.69 + 129.36 + 170.45 + 86.05 + 186.85 = 778.394$.

Далее приведены расчёты вероятностей перехода второго муравья c 1-й вершины:

#eq-simple($ p^2_12 = (0.438^1 * 0.494^2)/(0.00341) = 0.003 \
p^2_13 = (0.438^1 * 0.941^2)/(0.00341) = 0.011 \
p^2_14 = (0.438^1 * 0.431^2)/(0.00341) = 0.002 \
p^2_15 = (0.438^1 * 0.535^2)/(0.00341) = 0.004 \
p^2_16 = (0.752^1 * 6.667^2)/(0.00341) = 0.979 \
$)
Сгенерировано случайное число r = 0.866, которое определяет, на какую из вершин будет совершён переход. Для этого рассчитанные вероятности складываются в накопительную сумму.

#eq-simple($ P_2 = 0.003 < r = 0.866 \
P_3 = 0.015 < r = 0.866 \
P_4 = 0.017 < r = 0.866 \
P_5 = 0.021 < r = 0.866 \
P_6 = 1.000 >= r = 0.866 \
$)
Происходит переход на вершину 6. Далее приведены расчёты вероятностей перехода второго муравья c 6-й вершины:

#eq-simple($ p^2_62 = (0.752^1 * 0.524^2)/(0.00010) = 0.217 \
p^2_63 = (0.438^1 * 1.096^2)/(0.00010) = 0.551 \
p^2_64 = (0.438^1 * 0.450^2)/(0.00010) = 0.093 \
p^2_65 = (0.438^1 * 0.551^2)/(0.00010) = 0.139 \
$)
Сгенерировано случайное число r = 0.879, которое определяет, на какую из вершин будет совершён переход. Для этого рассчитанные вероятности складываются в накопительную сумму.

#eq-simple($ P_2 = 0.217 < r = 0.879 \
P_3 = 0.768 < r = 0.879 \
P_4 = 0.861 < r = 0.879 \
P_5 = 1.000 >= r = 0.879 \
$)
Происходит переход на вершину 5. Далее приведены расчёты вероятностей перехода второго муравья c 5-й вершины:

#eq-simple($ p^2_52 = (0.438^1 * 1.020^2)/(0.00015) = 0.312 \
p^2_53 = (0.602^1 * 0.594^2)/(0.00015) = 0.145 \
p^2_54 = (0.588^1 * 1.162^2)/(0.00015) = 0.543 \
$)
Сгенерировано случайное число r = 0.343, которое определяет, на какую из вершин будет совершён переход. Для этого рассчитанные вероятности складываются в накопительную сумму.

#eq-simple($ P_2 = 0.312 < r = 0.343 \
P_3 = 0.457 >= r = 0.343 \
$)
Происходит переход на вершину 3. Далее приведены расчёты вероятностей перехода второго муравья c 3-й вершины:

#eq-simple($ p^2_32 = (0.438^1 * 0.773^2)/(0.00004) = 0.635 \
p^2_34 = (0.438^1 * 0.587^2)/(0.00004) = 0.365 \
$)
Сгенерировано случайное число r = 0.329, которое определяет, на какую из вершин будет совершён переход. Для этого рассчитанные вероятности складываются в накопительную сумму.

#eq-simple($ P_2 = 0.635 >= r = 0.329 \
$)
Происходит переход на вершину 2. Далее приведены расчёты вероятностей перехода второго муравья c 2-й вершины:

#eq-simple($ p^2_24 = (0.602^1 * 2.273^2)/(0.00031) = 1.000 \
$)
Сгенерировано случайное число r = 0.841, которое определяет, на какую из вершин будет совершён переход. Для этого рассчитанные вероятности складываются в накопительную сумму.

#eq-simple($ P_4 = 1.000 >= r = 0.841 \
$)
Происходит переход на вершину 4. Затем муравей возвращается на начальную вершину, и его путь завершается. Таким образом, путь второго муравья выглядит следующим образом: $0 -> 5 -> 4 -> 2 -> 1 -> 3 -> 0$. Длина пути равна: $15.0 + 181.52 + 168.27 + 129.36 + 44.0 + 232.04 = 770.178$.

Затем выполняется испарение феромона по Формуле @pher-vapor аналогично предыдущей итерации.

Изменение концентрации феромона происходит по Формуле @pher-update, где значение Q принято за 100. Далее отображены только значения феромонов, которые после данной итерации изменились на ненулевую величину. 

#eq-simple($ tau_16 = 0.376 + 0.258 = 0.634 \
tau_23 = 0.219 + 0.128 = 0.347 \
tau_24 = 0.301 + 0.130 = 0.431 \
tau_32 = 0.219 + 0.130 = 0.349 \
tau_34 = 0.219 + 0.128 = 0.347 \
tau_41 = 0.219 + 0.130 = 0.349 \
tau_45 = 0.301 + 0.128 = 0.429 \
tau_51 = 0.219 + 0.128 = 0.347 \
tau_53 = 0.301 + 0.130 = 0.431 \
tau_62 = 0.376 + 0.128 = 0.504 \
tau_65 = 0.219 + 0.130 = 0.349 \
$)

== Программная реализация

Для реализации расчётов алгоритма муравьиной колонии написан программный код на языке Python 3.12.

В программной реализации зафиксированы следующие параметры:
- количество вершин в графе: 10
- количество муравьёв: 10
- количество итераций: 40
- $α = 1$
- $beta = 5$
- $rho = 0.5$
- $Q = 100$
Код реализации алгоритма муравьиной колонии представлен в Листинге @ant-code.

На Рисунке @ant-res представлен результат выполнения программы для нахождение минимального пути в графе --- графики зависимости лучшего пути и среднего пути от номера итерации.

#figure(image("/img/prac4_ant-res.png", height: 35%), caption: [График зависимости длины пути от номера итерации])<ant-res>

На Рисунке @ant-path представлен лучший путь, построенный муравьями в результате выполнения алгоритма.

#figure(image("/img/prac4_ant-path.png"), caption: [Построенный путь])<ant-path>
]

//
// ЗАКЛЮЧЕНИЕ
// 

#let outro = [
В ходе выполнения данной работы выполнены поставленные задачи --- изучен муравьиный алгоритм, произведён его ручной расчёт для решения задачи коммивояжёра, а также разработаны программы на языке Python для нахождения оптимального пути в графе.

В заключение можно отметить, что муравьиный алгоритм является мощным инструментом для решения задач оптимизации, в которых стандартные методы недостаточно эффективны из-за наличия множества решений, среди которых нужно найти только одно оптимальное. Алгоритм отлично справляется с нахождением оптимальных путей в графе, однако его сходимость является не очень высокой, а также результативность алгоритма сильно зависит от настройки свободных параметров.
]

//
// ПРИЛОЖЕНИЯ
// 

#let app = [
====== Реализация муравьиного алгоритма на языке Python

#simple-code(raw(read("/include/simple_ant_algorithm.py")),
             "Реализация муравьиного алгоритма",
             label: <ant-code>)
]

#heading("Введение", numbering: none)
#intro

= Алгоритм роя частиц
#main

#heading("Заключение", numbering: none)
#outro



#bibliography("/authors.bib", style: "/src/gost-r-7-0-5-2008-numeric-alphabetical.csl", title: "Список использованных источников", full: true)

#appendix()

#app
