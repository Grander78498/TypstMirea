#import ("/src/titul.typ"): *
#import ("/src/preamble.typ"): *
#show: main
#titul(
  Институт: [Информационных Технологий],
  Кафедра: [Вычислительной Техники],
  Практика: [Практическая работа №5\
            "Алгоритм пчелиной колонии"],
  Дисциплина: ["Системный анализ данных СППР"],
  Группа: [ИКБО-04-22],
  Студент: [Егоров Л.А.],
  Преподаватель: [Железняк Л.М.]
)
#show: template

#outline()


//
// ВВЕДЕНИЕ
// 

#let intro = [
Алгоритм пчелиной колонии --- это эвристический метод оптимизации, разработанный Марко Дориго и Дино Д'Агостино в 2005 году. Этот алгоритм вдохновлен поведением медоносных пчел, которые демонстрируют удивительную способность находить наилучшие источники нектара для сбора меда.

Основной целью работы пчелиной колонии в природе является разведка пространства вокруг улья с целью поиска нектара с последующим его сбором. Для этого в составе колонии существуют различные типы пчел: пчелы-разведчики и рабочие пчелы-фуражиры (кроме них, в колонии существуют трутни и матка, не участвующие в процессе сбора нектара). Разведчики ведут исследование окружающего улей пространства и сообщают информацию о перспективных местах, в которых было обнаружено наибольшее количество нектара (для обмена информацией в улье существует специальный механизм, именуемый танцем пчелы).

Алгоритм пчелиной колонии моделирует это поведение. Вместо реальных пчел и танцев, алгоритм использует "искусственных пчел" и "искусственные танцы". Искусственные пчелы перемещаются по пространству поиска, представленному в виде графа или сетки, и оценивают качество каждой позиции. Затем они возвращаются в "улей" и передают информацию о найденных позициях другим пчелам. Вероятность выбора пчелой определенной позиции зависит от ее качества и количества информации, полученной от других пчел. Со временем, пчелы концентрируют свои усилия на наиболее перспективных позициях.

Алгоритм пчелиной колонии широко используется для решения различных задач оптимизации, таких как:
-	задача календарного планирования
-	задача коммивояжёра
-	транспортная задача
]

//
// ОСНОВНАЯ ЧАСТЬ
// 
#let main = [
== Описание алгоритма
Сначала происходит инициализация начальных параметров и пчёл – генерация точек в области поиска (количество точек задано и равно S), а также свободных параметров алгоритма. Каждая точка имеет координаты (@bee-vec).


$ X_j=(x_(1 j),x_(2 j), dots ,x_(n j) ) " ," $<bee-vec>

#print_symbols(
  [$j in [1;S]$ --- номер частицы],
  [$n$ --- размерность векторов в задаче]
)

Формирование подобластей происходит на основе Евклидова расстояния между пчёлами (@bee-euclid).

$ d = sqrt((x_2 - x_1)^2 + (y_2 - y_1)^2) $<bee-euclid>

Сначала выбирается точка с наименьшим значением функции – она становится центром новой подобласти. Вокруг неё собираются все пчёлы, расстояние до которых от центральной пчелы меньше заданного числа $epsilon$. После проверки всех пчёл убираются те пчёлы, которые вошли в подобласть, и данные действия повторяются для оставшихся пчёл.

После формирования подобластей начинается поиск оптимального значения в каждой из них. В каждой области выбирается точка с наилучшим значение функции, вокруг неё в квадрате со стороной $2 Delta$ генерируются случайным образом $S-1$ пчёл, а затем среди сгенерированных пчёл и центральной пчелы выбирается та, которая имеет наименьшее значение функции. Теперь эта точка становится центром новой области, и процесс повторяется до тех пор, пока не наилучшая точка не останется статичной в течение заданного числа итераций.

Такой поиск проводится в каждой из полученных подобластей, и точкой останова алгоритма является окончание поиска в последней области. 

Точкой останова алгоритма является выполнение заданного числа итераций.

== Постановка задачи

Цель работы: реализовать глобальный алгоритм пчелиной колонии для нахождения оптимального значения функции.

Поставлены следующие задачи:

- изучить алгоритм пчелиной колонии
- выбрать тестовую функцию для оптимизации (нахождение глобального минимума)
- произвести ручной расчёт одной итерации алгоритма
- разработать программную реализацию алгоритма пчелиной колонии для задачи минимизации функции

Выбранная функция для оптимизации: функция Растригина (@rastrigin-3). Она примечательна тем, что имеет большое количество локальных минимумов. Глобальный минимум функции достигается в точке $(0;0)$ и равен 0, при этом, в остальных локальных минимумах значение функции больше нуля. Функция рассматривается на области $x_i in [-5.12,5.12]$.

$ f(x,y)=20+x^2-10 cos(2 pi x)+y^2-10 cos(2 pi y) $<rastrigin-3>

== Ручной расчёт алгоритма

Выбранная функция: функция Растригина от двух переменных. Её формула представлена Формулой @rastrigin-3.
На Рисунке @rastrigin-im-3 представлен график этой функции.
#figure(image("/img/prac5_2025-02-06-17-10-37.png"), caption: [График функции Растригина])<rastrigin-im-3>
Инициализированы свободные параметры алгоритма:
- $epsilon = 2$
- $Delta = 1$
- количество пчёл-разведчиков (S): 8

Создано 8 пчёл со следующими координатами:

#eq-simple($ X_1 = (-4.078, -5.091); f(X_0) = 45.310 \
X_2 = (4.723, -2.923); f(X_1) = 43.654 \
X_3 = (3.593, 3.706); f(X_2) = 57.682 \
X_4 = (-0.960, 3.632); f(X_3) = 31.198 \
X_5 = (3.945, -2.769); f(X_4) = 32.614 \
X_6 = (1.065, 4.941); f(X_5) = 27.056 \
X_7 = (4.918, 4.094); f(X_6) = 43.920 \
X_8 = (-1.068, 1.670); f(X_7) = 19.633 \
$)
Среди оставшихся точек лучшее значение имеется у пчелы $X_8$: значение функции у неё равно 19.633.
Далее рассчитывается Евклидово расстояние между точкой $X_8$ и оставшимися точками по Формуле @rastrigin-3.
#eq-simple($
d_(8 1) = sqrt((-1.068 + 4.078)^2 + (1.670 + 5.091)^2) = 7.401 >= 2 \
d_(8 2) = sqrt((-1.068 - 4.723)^2 + (1.670 + 2.923)^2) = 7.392 >= 2 \
d_(8 3) = sqrt((-1.068 - 3.593)^2 + (1.670 - 3.706)^2) = 5.087 >= 2 \
d_(8 4) = sqrt((-1.068 + 0.960)^2 + (1.670 - 3.632)^2) = 1.964 < 2 \
d_(8 5) = sqrt((-1.068 - 3.945)^2 + (1.670 + 2.769)^2) = 6.696 >= 2 \
d_(8 6) = sqrt((-1.068 - 1.065)^2 + (1.670 - 4.941)^2) = 3.904 >= 2 \
d_(8 7) = sqrt((-1.068 - 4.918)^2 + (1.670 - 4.094)^2) = 6.458 >= 2 \
$)
Следовательно, в область точки $X_8$ вошла точка $X_4$.

Среди оставшихся точек лучшее значение имеется у пчелы $X_6$: значение функции у неё равно 27.056.

Далее рассчитывается Евклидово расстояние между точкой $X_6$ и оставшимися точками по Формуле @rastrigin-3.
#eq-simple($
d_(6 1) = sqrt((1.065 + 4.078)^2 + (4.941 + 5.091)^2) = 11.273 >= 2 \
d_(6 2) = sqrt((1.065 - 4.723)^2 + (4.941 + 2.923)^2) = 8.673 >= 2 \
d_(6 3) = sqrt((1.065 - 3.593)^2 + (4.941 - 3.706)^2) = 2.813 >= 2 \
d_(6 5) = sqrt((1.065 - 3.945)^2 + (4.941 + 2.769)^2) = 8.230 >= 2 \
d_(6 7) = sqrt((1.065 - 4.918)^2 + (4.941 - 4.094)^2) = 3.945 >= 2 \
$)
Следовательно, точка $X_6$ образует область сама с собой.

Среди оставшихся точек лучшее значение имеется у пчелы $X_5$: значение функции у неё равно 32.614.

Далее рассчитывается Евклидово расстояние между точкой $X_5$ и оставшимися точками по Формуле @rastrigin-3.
#eq-simple($
d_(5 1) = sqrt((3.945 + 4.078)^2 + (-2.769 + 5.091)^2) = 8.352 >= 2 \
d_(5 2) = sqrt((3.945 - 4.723)^2 + (-2.769 + 2.923)^2) = 0.794 < 2 \
d_(5 3) = sqrt((3.945 - 3.593)^2 + (-2.769 - 3.706)^2) = 6.485 >= 2 \
d_(5 7) = sqrt((3.945 - 4.918)^2 + (-2.769 - 4.094)^2) = 6.932 >= 2 \
$)
Следовательно, в область точки $X_5$ вошла точка $X_2$.

Среди оставшихся точек лучшее значение имеется у пчелы $X_7$: значение функции у неё равно 43.920.

Далее рассчитывается Евклидово расстояние между точкой $X_7$ и оставшимися точками по Формуле @rastrigin-3.
#eq-simple($
d_(7 1) = sqrt((4.918 + 4.078)^2 + (4.094 + 5.091)^2) = 12.856 >= 2 \
d_(7 3) = sqrt((4.918 - 3.593)^2 + (4.094 - 3.706)^2) = 1.380 < 2 \
$)
Следовательно, в область точки $X_7$ вошла точка $X_3$.

Среди оставшихся точек лучшее значение имеется у пчелы $X_1$: значение функции у неё равно 45.310.

Поскольку точек больше не осталось, то точка $X_1$ образует область сама с собой.

Рассмотрим поиск в первой подобласти. Лучшая точка: $(-1.068, 1.670)$ со значением функции 19.633.
Новые сгенерированные точки имеют следующие координаты (точка $X_8$ является текущим центром области):

#eq-simple($ X_1 = (-0.822, 0.917); f(X_0) = 8.453 \
X_2 = (-1.212, 2.105); f(X_1) = 15.630 \
X_3 = (-0.196, 1.449); f(X_2) = 28.284 \
X_4 = (-0.845, 0.943); f(X_3) = 6.618 \
X_5 = (-0.775, 0.699); f(X_4) = 22.633 \
X_6 = (-0.826, 2.319); f(X_5) = 25.707 \
X_7 = (-1.464, 2.197); f(X_6) = 33.421 \
X_8 = (-1.068, 1.670); f(X_7) = 19.633 \
$)
Минимальное значение среди достигнуто точкой $X_4$ (значение функции равно 6.618). Следовательно, эта точка становится центром области, и происходит переход к новой итерации.

== Программная реализация
Для реализации расчётов алгоритма пчелиной колонии написан программный код на языке Python.

В программной реализации зафиксированы следующие параметры:
- количество пчёл: 100
- количество итераций: 30
- $epsilon=0.8$
- $Delta=1$
Код реализации алгоритма пчелиной колонии для нахождения оптимального значения функции представлен в Листинге @bee-code.

На Рисунке @bee-result представлен результат выполнения программы для нахождения оптимального значения функции – консольный вывод результатов поиска в нескольких областях. 

#figure(image("/img/prac5_2025-02-06-17-28-30.png"), caption: [Результаты поиска в первых 12 областях])<bee-result>
]

//
// ЗАКЛЮЧЕНИЕ
// 

#let outro = [
В ходе выполнения данной работы выполнены поставленные задачи –-- изучен алгоритм пчелиной колонии, произведён его ручной расчёт для решения задачи поиска глобального минимума функции, а также разработана программа на языке Python для нахождения глобального минимума функции Растригина от двух переменных.

В заключение можно отметить, что алгоритм пчелиной колонии является мощным инструментом для решения задач оптимизации (в том числе, задач нахождения глобального минимума функции), в которых стандартные методы недостаточно эффективны из-за наличия множества локальных минимумов. Алгоритм имеет высокую сходимость, однако его результативность сильно зависит от настройки большого количества свободных параметров.
]

//
// ПРИЛОЖЕНИЯ
// 

#let app = [
==== Реализация алгоритма пчелиной колонии на языке Python

#simple-code(raw(read("/include/bee_algorithm.py")),
             "Реализация алгоритма пчелиной колонии",
             label: <bee-code>)
]

#heading("Введение", numbering: none)
#intro

= Алгоритм роя частиц
#main

#heading("Заключение", numbering: none)
#outro



#bibliography("/authors.bib", style: "/src/gost-r-7-0-5-2008-numeric-alphabetical.csl", title: "Список использованных источников", full: true)

#appendix()

#app
